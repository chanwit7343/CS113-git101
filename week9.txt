
คำสั่ง git branch <branch-name> เป็นการสร้าง branch เป็นการแยกส่วนการพัฒนาออกจากกัน ไม่ให้ปนกัน เพื่อคงสภาพ Checkpoint ที่เป็นส่วนใหญ่ 
เช่นเวลาที่เราไปช่วยคนอื่นพัฒนา เราก็จะสร้าง branch อื่นเป็น checkpoint ของเราไม่ให้ปนกับของ master
คำสั่ง git branch มีไว้เพื่อตรวจสอบว่ามี branch ใดบ้าง(branch ปัจจุบันจะมี * นำหน้า)
คำสั่ง git checkout มีไว้เพื่อเปลี่ยน branch เช่น git checkout feature คือย้ายไปที่ branch feature 

คำสั่ง git merge เช่น git merge feature มีไว้เพื่อรวมงานไว้ใน branch ปัจจุบัน
การ Merge แบบมี Conflict คือมีความขัดแย้งกันของไฟล์ เกิดจากการปรับหรือแก้ไขข้อมูลในไฟล์เดิมที่อยู่ต่าง branch กัน git ตัดสินใจไม่ได้ว่าต้องใช้ข้อมูลไหน เราจึงต้องเลือกการแก้ไขเองดังนี้
หาก Editor มี tool ที่ช่วยจัดการ conflict เช่น Atom สามารถเลือกว่าจะใช้ข้อมูลจาก branch ใด
หาก Editor ไม่มี tool ช่วย เช่น sublime ต้อง เพิ่ม/แก้/ลบ เอง
*อย่าลืม commit การ merge เช่น git commit -m "merge branch 'feature2' and resolve conflict"

คำสั่ง git pull เช่น git pull origin master คือการดึงการเปลี่ยนแปลง
การ Pull ก็มีทั้งแบบมีความขัดแย้งและไม่ขัดแย้งเหมือนกัน การ Pull ส่วนใหญ่จะใช้คู่กับการ Push ใช้เช่นในกรณีที่เราย้ายเครื่อง

*การแก้ไขไฟล์ที่มี conflict สามารถแก้ไขใน vs code ได้เลย
การทำงานด้วย branch ควรสังเกตเสมอว่าเราอยู่ใน branch ไหน และควรใช้คำสั่งเหล่านี้ในการเช็คสถานะไฟล์และเกิดอะไรขึ้นบ้าง 
git status
git log --all --decorate --oneline --graph